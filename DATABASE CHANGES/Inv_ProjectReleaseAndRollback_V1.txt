
ALTER PROCEDURE [dbo].[Inv_ProjectReleaseAndRollback_V1]
	@Operation INT = NULL,
	@JobID varchar(20) = NULL,
	@UserId INT = NULL,
	@msg VARCHAR(50) = '' OUTPUT
AS
BEGIN	
	SET NOCOUNT ON;
	IF(@Operation = 1)
	BEGIN
		--TABLE 0
		SELECT tblProjects.JobID + ', ' + ISNULL(tblCustomers.CompanyName, '') + ', ' + ISNULL(tblCustomers.City, '')
		+ ', ' + ISNULL(tblStates.[State], '') + ', ' + ISNULL(tblCountries.Country, '')
		AS ProjectName,tblProjects.JobID
		FROM tblProjects
		INNER JOIN tblCustomers ON tblCustomers.CustomerID = tblProjects.CustomerID
		LEFT JOIN tblCountries ON tblCustomers.CountryID = tblCountries.CountryID
		LEFT JOIN tblStates ON tblCustomers.StateID = tblStates.StateID
		WHERE tblProjects.ReleaseToShop = 0
		ORDER BY tblProjects.JobID

		--TABLE 1
		SELECT tblProjects.JobID + ', ' + ISNULL(tblCustomers.CompanyName, '') + ', ' + ISNULL(tblCustomers.City, '')
		+ ', ' + ISNULL(tblStates.[State], '') + ', ' + ISNULL(tblCountries.Country, '')
		AS ProjectName,tblProjects.JobID
		FROM tblProjects
		INNER JOIN tblCustomers ON tblCustomers.CustomerID = tblProjects.CustomerID
		LEFT JOIN tblCountries ON tblCustomers.CountryID = tblCountries.CountryID
		LEFT JOIN tblStates ON tblCustomers.StateID = tblStates.StateID
		WHERE tblProjects.ReleaseToShop = 1
		ORDER BY tblProjects.JobID

		--TABLE 2
		SELECT id AS Partid, PartNumber + ', ' + ISNULL(PartDes, '') AS PartDetails 
		FROM Inv_Parts	
		Order by PartNumber

		--TABLE 3
		SELECT ID,Reason 
		FROM [dbo].[Inv_StockAdjustmentReasons]
		ORDER BY Reason
	END

	ELSE IF(@Operation = 2)--PROJECT RELEASE
	BEGIN
		BEGIN TRY
		BEGIN TRANSACTION

			DECLARE @partid INT
			DECLARE @projectid VARCHAR(50)			
			DECLARE @partqty INT
			DECLARE @WarehouseId INT

			DECLARE @tbStockOut AS TABLE
			(
				partid INT,
				projectid VARCHAR(250),
				partqty INT
			)

			SET @WarehouseId = (SELECT WarehouseId FROM tblProjects WHERE JobID = @JobID)
			IF ISNULL(@WarehouseId, 0) = 0
			BEGIN
				SET @msg = 'ER01'
				ROLLBACK
				RETURN
			END

			INSERT INTO @tbStockOut
			SELECT CASE WHEN ISNULL(P.ChildPartID, 0) = 0 THEN P.ParentPartID ELSE ChildPartID END AS PartId, PJ.JobID AS ProjectId, SUM(PJ.Qty) AS Qty
			FROM Inv_AWProduct_Projects PJ
			INNER JOIN Inv_AWProduct_Parts P ON P.id = PJ.AWProductPartsID
			LEFT JOIN Inv_Parts PA ON PA.id = P.ParentPartID
			LEFT JOIN Inv_Parts PA1 ON PA1.id = P.ChildPartID
			WHERE PJ.JobID = @JobID
			GROUP BY CASE WHEN ISNULL(P.ChildPartID, 0) = 0 THEN P.ParentPartID ELSE ChildPartID END, PJ.JobID

			IF((SELECT COUNT(*) FROM @tbStockOut) = 0)
			BEGIN
				INSERT INTO @tbStockOut
				SELECT Inv_ProjectParts.partid, Inv_ProjectParts.projectid,
				SUM(Inv_ProjectParts.qty) AS Qty
				FRoM Inv_ProjectParts
				WHERE Inv_ProjectParts.projectid = @JobID
				GROUP BY Inv_ProjectParts.partid, Inv_ProjectParts.projectid
			END

			INSERT INTO Inv_StockTransactions
			(WarehouseId, [partid], [projectid], [transactqty], [transactdatetime], [transactsummary], [transactby], [transactmode])
			SELECT @WarehouseId, partid, projectid, -ABS(partqty), GETDATE(), NULL, @userid, 'A'
			FROM @tbStockOut

			IF(SELECT COUNT(partid) FROM @tbStockOut) > 0
			BEGIN					
				DECLARE CUR_PART CURSOR            

				STATIC FOR
					SELECT [partid], [projectid], [partqty] FROM @tbStockOut

				OPEN CUR_PART	 

				IF @@CURSOR_ROWS > 0
				BEGIN
                    FETCH NEXT FROM CUR_PART INTO @partid, @projectid, @partqty
					WHILE @@FETCH_STATUS = 0
					BEGIN				
						DECLARE @OPENSTOCK INT = 0						

						IF EXISTS(SELECT Id FROM Inv_Parts_StockInHand WHERE PartId = @PartId AND WarehouseId = @WarehouseId)
						BEGIN
							SET @OPENSTOCK = (SELECT StockInHand FROM Inv_Parts_StockInHand WHERE PartId = @PartId AND WarehouseId = @WarehouseId)
						END
						ELSE
						BEGIN
							INSERT INTO Inv_Parts_StockInHand(PartId, WarehouseId, StockInHand, InsertedDate, InsertedByUser)
							VALUES(@PartId, @WarehouseId, 0, GETDATE(), @UserId)
						END

						UPDATE Inv_StockTransactions SET [openingstock] = @OPENSTOCK, [closingstock] = (@OPENSTOCK - ABS(@partqty))
						WHERE id = (
							SELECT TOP 1 id
							FROM Inv_StockTransactions
							WHERE partid = @partid AND projectid = @projectid
							ORDER BY [timestamp] DESC 
						)

						UPDATE tblProjects SET ReleaseToShop = 1 
						WHERE JobID = @projectid

						UPDATE Inv_Parts_StockInHand SET StockInHand = (@OPENSTOCK - @partqty), UpdatedDate = GETDATE(), UpdatedByUser = @UserId 
						WHERE PartId = @partid AND WarehouseId = @WarehouseId
				
						FETCH NEXT FROM CUR_PART INTO @partid, @projectid, @partqty
					END
				END			 
				CLOSE CUR_PART
				DEALLOCATE CUR_PART
			END
			ELSE
			BEGIN
				UPDATE tblProjects SET ReleaseToShop = 1 WHERE JobID = @JobID
			END			  

		--IF @@TRANCOUNT > 0
			 COMMIT
			SET @msg = 'S'
		END TRY

		BEGIN CATCH 
		IF @@TRANCOUNT > 0
			 ROLLBACK
		END CATCH
	END

	ELSE IF(@Operation = 3)--PROJECT ROLLBACK
	BEGIN
		BEGIN TRY
		BEGIN TRANSACTION
			DECLARE @tid INT
			DECLARE @partidA VARCHAR(50)
			DECLARE @projectidA VARCHAR(50)			
			DECLARE @partqtyA INT
			
			SET @WarehouseId = 0

			IF(SELECT COUNT(PartId) FROM Inv_StockTransactions WHERE ProjectId = @JobID) > 0
			BEGIN
				INSERT INTO Inv_StockTransactions
				(WarehouseId, [partid], [projectid], [transactqty], [transactdatetime], [transactsummary], [transactby], [transactmode])
				SELECT WarehouseId, partid, @JobID, ABS(transactqty), GETDATE(), 'Rollback', @userid, 'A'
				FROM Inv_StockTransactions 
				WHERE projectid = @JobID AND adjustmentmade IS NULL AND [transactsummary] IS NULL

				DECLARE CUR_PART CURSOR            

				STATIC FOR
					SELECT id, partid, @JobID, ABS(transactqty), WarehouseId FROM Inv_StockTransactions WHERE projectid = @JobID AND adjustmentmade IS NULL AND [transactsummary] IS NULL

				OPEN CUR_PART	 

				IF @@CURSOR_ROWS > 0
				BEGIN
                    FETCH NEXT FROM CUR_PART INTO @tid, @partidA, @projectidA, @partqtyA, @WarehouseId

					WHILE @@FETCH_STATUS = 0
					BEGIN								
						DECLARE @OPENSTOCKA INT = 0
						--SET @OPENSTOCKA = (SELECT TOP 1 ISNULL(stockinhand, 0) FROM Inv_Parts WHERE id = @partidA)
						
						IF EXISTS(SELECT Id FROM Inv_Parts_StockInHand WHERE PartId = @partidA AND WarehouseId = @WarehouseId)
						BEGIN
							SET @OPENSTOCKA = (SELECT StockInHand FROM Inv_Parts_StockInHand WHERE PartId = @partidA AND WarehouseId = @WarehouseId)
						END
						ELSE
						BEGIN
							INSERT INTO Inv_Parts_StockInHand(PartId, WarehouseId, StockInHand, InsertedByUser, InsertedDate)
							VALUES(@partidA, @WarehouseId, 0, @UserId, GETDATE())
						END

						UPDATE Inv_StockTransactions SET adjustmentmade = 1 WHERE ID = @tid AND [transactsummary] IS NULL

						UPDATE Inv_StockTransactions SET [openingstock] = @OPENSTOCKA, [closingstock] = (@OPENSTOCKA + ABS(@partqtyA))				 
						WHERE id = (
							SELECT TOP 1 id
							FROM Inv_StockTransactions
							WHERE partid = @partidA AND projectid = @projectidA AND [transactsummary] = 'Rollback'
							ORDER BY [timestamp] DESC 
						)
						UPDATE tblProjects SET ReleaseToShop = 0 WHERE JobID = @projectidA
						
						UPDATE Inv_Parts_StockInHand SET StockInHand = (StockInHand + @partqtyA), UpdatedByUser = @UserId, UpdatedDate = GETDATE() 
						WHERE PartId = @partidA AND WarehouseId = @WarehouseId
				
						FETCH NEXT FROM CUR_PART INTO @tid, @partidA, @projectidA, @partqtyA, @WarehouseId
					 END
				END
			END
			ELSE
			BEGIN
				UPDATE tblProjects SET ReleaseToShop = 0 WHERE JobID = @JobID
			END	

		--IF @@TRANCOUNT > 0
			 COMMIT
			SET @msg = 'S'
		END TRY

		BEGIN CATCH 
		IF @@TRANCOUNT > 0
			 ROLLBACK
		END CATCH
	END
END
